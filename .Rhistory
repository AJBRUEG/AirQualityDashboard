#graph
ggplot(tempdf1)+
geom_point(aes(x=Date,y=perc_change_perday,color=ETF))
#graph
ggplot(tempdf1)+
geom_point(aes(x=Date,y=perc_change_perday,color=ETF))+
stat_summary(aes(x=Date,y=perc_change_perday,group=ETF,color=ETF),geom="line")
#pivot wider
tempdf2 <- tempdf1 %>%
tidyr::pivot_wider(id_cols=Date,names_from=ETF,values_from=perc_change_perday)
#graph
ggplot(tempdf2)+
geom_point(aes(x=LJIM,y=VOO))
#graph
ggplot(tempdf2)+
geom_point(aes(x=LJIM,y=VOO))+
geom_abline(intercept=0,slope=1)
#graph
ggplot(tempdf2)+
geom_point(aes(x=LJIM,y=VTI))+
geom_abline(intercept=0,slope=1)
#graph
ggplot(tempdf2)+
geom_point(aes(x=LJIM,y=VT))+
geom_abline(intercept=0,slope=1)
# Example dataframe
df <- data.frame(A = 1:5, B = 6:10)
# Dynamic variable
col_name <- "A"
# Use dynamic variable in mutate
df <- df %>%
mutate(new_column = {{col_name}} * 2)
library(dplyr)
# Example dataframe
df <- data.frame(A = 1:5, B = 6:10)
# Dynamic variable
col_name <- "A"
# Use dynamic variable in mutate
df <- df %>%
mutate(new_column = {{col_name}} * 2)
library(dplyr)
# Example dataframe
df <- data.frame(A = 1:5, B = 6:10)
# Dynamic variable
col_name <- "A"
# Use dynamic variable in mutate with get()
df <- df %>%
mutate(new_column = get(col_name) * 2)
# View the updated dataframe
df
library(dplyr)
# Example dataframe
df <- data.frame(A = 1:5, B = 6:10)
# Dynamic variable
col_name <- "A"
# Use NSE in mutate to create a new column dynamically
df <- df %>%
mutate(new_column = !!sym(col_name) * 2)
# View the updated dataframe
df
#summariz
df %>%
group_by(!!sym(col_name)) %>%
summarize(n=n())
# View the updated dataframe
df
install.packages("nflfastR")
install.packages("nflreadr")
0
#libraries
library(nflfastR)
library(nflreadr)
install.packages("nflfastR")
install.packages("nflfastR")
install.packages("nflfastR")
install.packages("nflfastR")
install.packages("nflfastR")
# Install necessary packages
install.packages(c("tidyverse", "httr", "jsonlite", "pheatmap"))
install.packages(c("tidyverse", "httr", "jsonlite", "pheatmap"))
install.packages(c("tidyverse", "httr", "jsonlite", "pheatmap"))
install.packages(c("tidyverse", "httr", "jsonlite", "pheatmap"))
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(c("GEOquery", "limma", "edgeR"))
# Fetch dataset from GEO (example: GSEXXXXX)
gse_id <- "GSE223667"  # Replace with a plant-specific GEO dataset ID
library(GEOquery)
gse_data <- getGEO(GEO = gse_id, GSEMatrix = TRUE, getGPL = FALSE)
library(GEOquery)
require("GEOquery")
if(!require("GEOquery"))install.packages("GEOquery")
library(GEOquery)
# Fetch dataset from GEO (example: GSEXXXXX)
#specify a GEO dataset ID (GSExxxxxx)
#look through the GEO database for a dataset you are interested in
gse_id <- "GSE223667"  # Replace with a plant-specific GEO dataset ID
gse_data <- getGEO(GEO = gse_id, GSEMatrix = TRUE, getGPL = FALSE)
install.packages("GEOquery")
if(!require("GEOquery"))install.packages("GEOquery")
library(GEOquery)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install()
BiocManager::install("GEOquery")
BiocManager::version()
BiocManager::install(version="3.x")
url <- "http://bioconductor.org/"
tryCatch({
browseURL(url)
message("Internet connectivity seems fine.")
}, error = function(e) {
message("Check your internet connection or proxy settings.")
})
install.packages("XML")
BiocManager::install("GEOquery", dependencies = TRUE)
install.packages("GEOquery", repos = "http://bioconductor.org/packages/release/bioc")
library(GEOquery)
R.version.string
R.version.string
if(!require("GEOquery"))install.packages("GEOquery")
library(GEOquery)
install.packages("GEOquery", repos = "http://bioconductor.org/packages/release/bioc")
if(!require("GEOquery"))install.packages("GEOquery")
install.packages("matrixStats")
1+1
library(httr)
library(jsonlite)
# API Details
base_url <- "http://api.openweathermap.org/data/2.5/air_pollution"
api_key <- "your_api_key_here"  # Replace with your API key
# Function to fetch air quality data
fetch_air_quality <- function(lat, lon) {
url <- paste0(base_url, "?lat=", lat, "&lon=", lon, "&appid=", api_key)
response <- GET(url)
if (status_code(response) == 200) {
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
return(data$list)
} else {
stop("API request failed. Check your API key and coordinates.")
}
}
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
# API Details
base_url <- "http://api.openweathermap.org/data/2.5/air_pollution"
#enter your API key here
api_key <- "04ce34a24fbd43e4f6f986fce31b0b30"
# Function to fetch air quality data
fetch_air_quality <- function(lat, lon) {
url <- paste0(base_url, "?lat=", lat, "&lon=", lon, "&appid=", api_key)
response <- GET(url)
if (status_code(response) == 200) {
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
return(data$list)
} else {
stop("API request failed. Check your API key and coordinates.")
}
}
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
print(nyc_data)
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
#enter your API key here
api_key <- 04ce34a24fbd43e4f6f986fce31b0b30
#enter your API key here
api_key <- "5b171878303dd7d6a0b9e5dc0c4d6923"
# Function to fetch air quality data
fetch_air_quality <- function(lat, lon) {
url <- paste0(base_url, "?lat=", lat, "&lon=", lon, "&appid=", api_key)
response <- GET(url)
if (status_code(response) == 200) {
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
return(data$list)
} else {
stop("API request failed. Check your API key and coordinates.")
}
}
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
#enter your API key here
api_key <- "04ce34a24fbd43e4f6f986fce31b0b30"
# Function to fetch air quality data
fetch_air_quality <- function(lat, lon) {
url <- paste0(base_url, "?lat=", lat, "&lon=", lon, "&appid=", api_key)
response <- GET(url)
if (status_code(response) == 200) {
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
return(data$list)
} else {
stop("API request failed. Check your API key and coordinates.")
}
}
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
print(nyc_data)
install.packages(c("shiny", "DBI", "RSQLite", "httr", "jsonlite", "ggplot2", "leaflet"))\
install.packages(c("shiny", "DBI", "RSQLite", "httr", "jsonlite", "ggplot2", "leaflet"))
source("api_integration.R")
pwd()
setwd("C:/Users/drewj/OneDrive/R_based_work/AirQualityDashboard")
source("api_integration.R")
store_data(fetch_air_quality(40.7128, -74.0060), "New York City", 40.7128, -74.0060)
# Function to fetch air quality data
fetch_air_quality <- function(lat, lon) {
url <- paste0(base_url, "?lat=", lat, "&lon=", lon, "&appid=", api_key)
response <- GET(url)
if (status_code(response) == 200) {
data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
return(data$list)
} else {
stop("API request failed. Check your API key and coordinates.")
}
}
source("api_integration.R")
library(DBI)
library(RSQLite)
# Connect to SQLite database
db <- dbConnect(SQLite(), "air_quality.db")
# Create the table (if not exists)
dbExecute(db, "CREATE TABLE IF NOT EXISTS air_quality (
id INTEGER PRIMARY KEY AUTOINCREMENT,
city TEXT,
latitude REAL,
longitude REAL,
datetime TEXT,
aqi INTEGER,
pm25 REAL,
pm10 REAL,
ozone REAL
)")
# Insert API data
store_data <- function(data, city, lat, lon) {
for (entry in data) {
dbExecute(db, "INSERT INTO air_quality (city, latitude, longitude, datetime, aqi, pm25, pm10, ozone)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
params = list(city, lat, lon, entry$dt, entry$main$aqi,
entry$components$pm2_5, entry$components$pm10, entry$components$o3))
}
}
# Example: Store NYC data
store_data(nyc_data, "New York City", 40.7128, -74.0060)
store_data(fetch_air_quality(40.7128, -74.0060), "New York City", 40.7128, -74.0060)
source("api")
source("api_integration.R")
shiny::runApp("shiny_app/app.R")
store_data(fetch_air_quality(40.7128, -74.0060), "New York City", 40.7128, -74.0060)
# Example: Store NYC data
store_data(nyc_data, "New York City", 40.7128, -74.0060)
# Example: Store NYC data
store_data(nyc_data, "New York City", 40.7128, -74.0060)
# Example: Store NYC data
store_data(nyc_data, "New York City", 40.7128, -74.0060)
# Example: Fetch data for New York City
nyc_data <- fetch_air_quality(lat = 40.7128, lon = -74.0060)
print(nyc_data)
View(nyc_data)
colnames(nyc_data)
list("hello","i","am",store_data$dt)
store_data$dt
nyc_data$dt
class(nyc_data)
for(entry in nyc_data){
print(entry)
}
in1 <- read.table("clipboard",sep="\t",header=TRUE,row.names = FALSE)
in1 <- read.table("clipboard",sep="\t",header=TRUE,stringsAsFactors = FALSE)
head(in1)
library(dplry)
library(dplyr)#format
library(tidyr)
library(ggplot2)
#format
tempdf1 <- in1 %>%
#calculate % change
dplyr::mutate(vix_change=(VIX-lag(VIX,n=1))/(lag(VIX,n=1)),
vti_change=(VTI-lag(VTI,n=1))/(lag(VTI,n=1)))
head(tempdf1)
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,vti_change,color=Date))
#format
tempdf1 <- in1 %>%
#calculate % change
dplyr::mutate(vix_change=(VIX-lag(VIX,n=1))/(lag(VIX,n=1)),
vti_change=(VTI-lag(VTI,n=1))/(lag(VTI,n=1))) %>%
#calculate year
dplyr::mutate(date2=as.Date(Date,'%m/%d/%Y')) %>%
dplyr::mutate(year=as.numeric(format(date2,'%Y')))
head(tempdf1)
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,vti_change,color=year))
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,vti_change))
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,vti_change,color=year))
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,vti_change))+
facet_wrap(.~year)
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))
install.packages("ggpmisc")
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))
library(ggpmisc)
#graph
ggplot(tempdf1)+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))
#graph
ggplot(tempdf1 %>%
filter(year==2024))+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))+
#graph
ggplot(tempdf1 %>%
filter(year==2024))+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))+
#cleanup
theme_bw()+
scale_y_continuous(labels=scales::percent)
#graph
ggplot(tempdf1 %>%
filter(year==2024))+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))+
#cleanup
theme_bw()+
scale_x_continuous(labels=scales::percent)+
scale_y_continuous(labels=scales::percent)
#graph
ggplot(tempdf1 %>%
filter(year==2024))+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))+
#cleanup
theme_bw()+
scale_x_continuous(labels=scales::percent)+
scale_y_continuous(labels=scales::percent)+
#zoom
coord_cartesian(x=c(-0.1,0.1),y=c(-0.1,0.1))
#graph
ggplot(tempdf1 %>%
filter(year==2024))+
geom_point(aes(x=vix_change,y=vti_change))+
facet_wrap(.~year)+
#lienar regression
stat_poly_line(aes(x=vix_change,y=vti_change))+
stat_poly_eq(aes(x=vix_change,y=vti_change))+
#cleanup
theme_bw()+
scale_x_continuous(labels=scales::percent)+
scale_y_continuous(labels=scales::percent)+
#zoom
coord_cartesian(x=c(-0.2,0.2),y=c(-0.2,0.2))
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2))
tempdf2
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(vti_ave_change=mean(vti_change,na.rm=TRUE),
vti_pos=n(vti_change[vti_change>0]),
vti_neg=n(vti_change[vti_change<0]),
vti_tot=n(vti_change))
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(vti_tot=n(vti_change))
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(n=n())
tempdf2
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(n=n(),
vti_pos=length(vti_change[vti_change>0]))
tempdf2
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(n=n(),
vti_pos=length(vti_change[vti_change>0]),
vti_neg=length(vti_change[vti_change<0]),
vti_tot=length(vti_change))
tempdf2
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(n=n(),
vti_pos=length(vti_change[vti_change>0]),
vti_neg=length(vti_change[vti_change<0]))
tempdf2
#calculate % of values that were <0 (if VIX was >0) or vice versa, depending on VIX value
tempdf2 <- tempdf1 %>%
dplyr::mutate(vix_quads=round(vix_change,digits=2)) %>%
dplyr::group_by(vix_quads) %>%
dplyr::summarize(n=n(),
vti_pos=length(vti_change[vti_change>0]),
vti_neg=length(vti_change[vti_change<0])) %>%
dplyr::mutate(vti_pos_perc=vti_pos/n,
vti_neg_perc=vti_neg/n)
tempdf2
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()
View(tempdf2)
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()+
#fit curve
geom_smooth()
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()+
#fit curve
geom_smooth(method="glm",method.args=list(family="binomial"),se=TRUE)
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()+
geom_line(group=1)
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()+
#fit curve
geom_smooth(data=tempdf2 %>%
dplyr::filter(!(vti_pos_perc>0.5 & vix_quads>0.2)),method="glm",method.args=list(family="binomial"),se=TRUE)
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()+
#fit curve
geom_smooth(data=tempdf2 %>%
dplyr::filter(!(vti_pos_perc>0.5 & vix_quads>0.2)),method="glm",method.args=list(family="binomial"),se=TRUE)+
#label
labs(x="VIX",y="% of occurrences where VTI performed positively")
#graph
ggplot(tempdf2,aes(x=vix_quads,y=vti_pos_perc))+
geom_point()+
#fit curve
geom_smooth(data=tempdf2 %>%
dplyr::filter(!(vti_pos_perc>0.5 & vix_quads>0.2)),method="glm",method.args=list(family="binomial"),se=TRUE)+
#label
labs(x="VIX performance vs previous day",y="% of occurrences where VTI performed positively")+
#cleanup
theme_bw()+
scale_x_continuous(labels=scales::percent)+
scale_y_continuous(labels=scales::percent)
head(tempdf1)
#See if there is a correlation between VIX and VTI the following day
tempdf3 <- tempdf1 %>%
#filter for 2024
dplyr::filter(year==2024) %>%
dplyr::mutate(vix_change_2=lag(vix_change,n=1))
head(tempdf3)
#graph
ggplot(tempdf3,aes(x=vix_change_2,y=vti_change))+
geom_point()+
#lienar regression
stat_poly_line()+
stat_poly_eq()+
#cleanup
theme_bw()+
scale_x_continuous(labels=scales::percent)+
scale_y_continuous(labels=scales::percent)
